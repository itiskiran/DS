1. Write a c program to perform insertion operation in an array
#include <stdio.h>

int main()
{
    int arr[50], n, pos, item,i;

    printf("Enter the size of the array: ");
    scanf("%d", &n);

    printf("Enter the elements of the array:");
    for ( i = 0; i < n; i++) 
    {
        scanf("%d", &arr[i]);
    }

    printf("Enter the position and value of the new element to be inserted: ");
    scanf("%d%d", &pos, &item);

    for (i = n - 1; i >= pos-1; i--) 
    {
        arr[i+1] = arr[i];
    }

    arr[pos-1] = item;
    n++;

    printf("The updated array is:");
    for (i = 0; i < n; i++) 
    {
        printf("\t%d", arr[i]);
    }
    return 0;
}
2. Write a c program to perform deletion operation in an array
#include <stdio.h>

int main()
{
    int array[100], position, i, n;

   printf("Enter the number of elements in array");
   scanf("%d", &n);

   printf("Enter %d elements", n);
   for (i = 0; i < n; i++)
    {
      scanf("%d", &array[i]);
    }
   printf("Enter the location where you wish to delete element");
   scanf("%d", &position);

   if (position >= n+1)
   {
      printf("Deletion not possible.");
   }
   else
   {
      for (i = position-1; i < n-1; i++)
       {
         array[i] = array[i+1];
       }
      printf("Final array is");

      for (i = 0; i < n-1; i++)
       {
         printf("\t%d", array[i]);
       }
   }
    return 0;
}
3. Write a c program to represent sparse matrix using arrays
#include<stdio.h>

int main()
{
   int sparseMatrix[4][5] = {	{0 , 0 , 3 , 0 , 4 },
			{0 , 0 , 5 , 7 , 0 },
			{0 , 0 , 0 , 0 , 0 },
			{0 , 2 , 6 , 0 , 0 }
		           };

    int size = 0;
    for (int i = 0; i < 4; i++)
      for (int j = 0; j < 5; j++)
        if (sparseMatrix[i][j] != 0)
            size++;
	
     int compactMatrix[3][size];

     int k = 0;
     for (int i = 0; i < 4; i++)
        for (int j = 0; j < 5; j++)
          if (sparseMatrix[i][j] != 0)
	{
	   compactMatrix[0][k] = i;
	   compactMatrix[1][k] = j;
	   compactMatrix[2][k] = sparseMatrix[i][j];
	   k++;
	}
      
      for (int i=0; i<3; i++)
        {
	for (int j=0; j<size; j++)
	   printf("\t%d ", compactMatrix[i][j]);

	printf("\n");
          }
	return 0;
}

4. Write a c program to demonstrate stack operations using array
#include <stdio.h>

#define N 10

int stack[N],i,top=-1;

void push(int item);
void pop();
void show();
void peek();

void main ()
{
 push(10);
 push(20);
 push(30);
 push(40);
 push(50);
 peek();
 show();
 pop();
 pop();
 peek();
 show();
}

void push (int x)
{

    if (top == N-1 )
      printf("\n Overflow");
    else
    {
        top = top +1;
        stack[top] = x;
    }
}

void pop ()
{
    if(top == -1)
    printf("Underflow");
    else
    {
      printf("\nPerforming POP Operation:");
      top = top -1;

    }

}
void show()
{
    printf("\nElements in the stack are:\n");
    for (i=top;i>=0;i--)
    {
        printf("%d\n",stack[i]);
    }
    if(top == -1)
    {
        printf("Stack is empty");
    }
}
void peek()
{
  if(top == -1)
    {
        printf("Stack is empty");
    }
   printf("\nPeek of the stack is :%d",stack[top]);
}

5. Develop c program to convert infix expression to postfix expression
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

int prec(char c) 
{

    if (c == '^')
        return 3;
    else if (c == '/' || c == '*')
        return 2;
    else if (c == '+' || c == '-')
        return 1;
    else
        return -1;
}

void infixToPostfix(char* exp) 
{
    int len = strlen(exp);
    char result[len + 1];
    char stack[len];
    int j = 0;
    int top = -1;

    for (int i = 0; i < len; i++) 
    {
        char c = exp[i];

        // If the scanned character is an operand, add it to the output string.
        if (isalnum(c))
            result[j++] = c;

        // If the scanned character is an ‘(‘, push it to the stack.
        else if (c == '(')
            stack[++top] = '(';

        // If the scanned character is an ‘)’,  pop and add to the output string from the stack 
        // until an ‘(‘ is encountered.
        else if (c == ')') 
           {
            while (top != -1 && stack[top] != '(') 
              {
                result[j++] = stack[top--];
               }
            top--; 
          }

        // If an operator is scanned
        else 
          {
            while (top != -1 && (prec(c) < prec(stack[top]) ||
                                 prec(c) == prec(stack[top]))) {
                result[j++] = stack[top--];
            }
            stack[++top] = c;
          }
    }

    // Pop all the remaining elements from the stack
    while (top != -1) 
    {
        result[j++] = stack[top--];
    }

    result[j] = '\0';
    printf("%s\n", result);
}

int main() 
{
    char exp[] = "a+b*(c^d-e)^(f+g*h)-i";
    infixToPostfix(exp);
    return 0;
}

6. Develop c program to evaluate postfix expression
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>

#define SIZE 50

int pop();
void push(int);

char postfix[SIZE];
int stack[SIZE], top = -1;

int main()
{
	int i, a, b, result, pEval;
	char ch;
	
	for(i=0; i<SIZE; i++)
	{
		stack[i] = -1;
	}
	printf("\nEnter a postfix expression: ");
	scanf("%s",postfix);

	for(i=0; postfix[i] != '\0'; i++)
	{
		ch = postfix[i];

		if(isdigit(ch))
		{
			push(ch-'0');
		}
		else if(ch == '+' || ch == '-' || ch == '*' || ch == '/')
		{
			b = pop();
			a = pop();
			
			switch(ch)
			{
				case '+': result = a+b;
					  break;
				case '-': result = a-b;
					  break;
				case '*': result = a*b;
					  break;
				case '/': result = a/b;
					  break;
				case '%':result = a%b;
					  break;
			}
			
			push(result);
		}		
	
	}

	pEval = pop();
	
	printf("\nThe postfix evaluation is: %d\n",pEval);
	
	return 0;
}

void push(int n)
{
	if (top < SIZE -1)
	{
		stack[++top] = n;
	}
	else
	{
		printf("Stack is full!\n");
		exit(-1);
	}
}
int pop()
{	
	int n;
	if (top > -1)
	{
		n = stack[top];
		stack[top--] = -1;
		return n;
	}
	else
	{
		printf("Stack is empty!\n");
		exit(-1);
	}
}	
7. Write a c program to demonstrate towers of hanoi
#include <stdio.h>

void toH(int n, char pollA, char pollC, char pollB)
{
	if (n == 1)
	{
		printf("\n Move disk 1 from poll %c to poll %c",pollA ,pollC );
		return;
	}
	toH(n-1, pollA, pollB, pollC);
	printf("\n Move disk %d from poll %c to poll %c", n, pollA, pollC);
	toH(n-1, pollB, pollC,pollA);
}

int main()
{
	int disks ;
	printf("Enter number of disks: ");
	scanf("%d", &disks);
	toH(disks, 'A','C','B'); 
	return 0;
}

